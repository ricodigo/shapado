-title = h(question.title)
-if question.closed
  -title += " [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

-if !local_assigns[:mini]
  -owner = nil
  - if question.last_target_id.present?
    - last_target_id = question.last_target_id
    - last_target_date = question.last_target_date || question.updated_at
    - owner = question.last_target_user
  -else
    - last_target = question
    - last_target_date = question.updated_at
    - owner = question.user unless question.anonymous

  %article{:class => class_for_question(question), :id => question.id}
    %h2
      -if question.wiki
        = link_to t('.wiki_title', :title => title), question_path(question), :title => truncate(strip_tags(question.body), :length => 200), :class => "pjax", :"data-layout" => "question"
      -else
        = link_to title, question_path(question), :title => truncate(strip_tags(question.body), :length => 200), :class => "pjax", :"data-layout" => "question"
    .user-data
      -if owner
        =render :partial => "users/user_data", :locals => {:user => owner}
      -else
        =# i18n
        By:
        =t("global.anonymous")
      %time{:pubdate => "pubdate", :datetime => last_target_date.iso8601}
        = link_to t("time.ago", :time => time_ago_in_words(last_target_date)), question_path(question, :anchor => last_target_id)


    .tags
      -if !question.tags.empty? && logged_in? && (current_user.can_modify?(question) || current_user.can_retag_others_questions_on?(current_group))
        %ul
          %li
            Tags:
          -question.first_tags.each do |tag|
            %li{:class => "tag_#{h(tag)}"}
              = tag_link(tag)
          %li
            = link_to t('questions.show.retag'), retag_question_path(question), :id => 'retag', :class => "retag"
        .clear

    .toolbar
      %ul
        %li.answers
          = link_to t('.answers_number', :quantity => format_number(question.answers_count)), question_path(question)

        -if question.followers_count.to_i > 0
          %li.followers
            = t('questions.index.followers_count', :quantity => format_number(question.followers_count))

        -if !logged_in? || (current_user != question.user && current_user.has_flagged?(question).nil?)
          %li.spam
            = link_to t(".flag", :default => :"questions.show.flag"), new_question_flag_path(question), :class => "flag-link-index", :rel => 'nofollow'

        %li
          - if logged_in? && question.follower?(current_user)
            = link_to t('global.unfollow'), unfollow_question_path(question), :class => 'unfollow-q question-action', "data-undo" =>  follow_question_path(question), "data-title" => t("questions.show.follow_tooltip"), :title => t("questions.show.unfollow_tooltip"), 'data-text' => t('global.follow')
          - elsif !logged_in? || !question.follower?(current_user)
            = link_to t('global.follow'), follow_question_path(question), :title => t("questions.show.follow_tooltip"), :class => 'follow-q question-action', "data-undo" =>  unfollow_question_path(question), "data-title" => t("questions.show.unfollow_tooltip"), 'data-text' => t('global.unfollow')

        %li
          =link_to t('.answer_verb'), question_path(question, :anchor => "to_answer")

    .clear

-else
  %article{:class => "#{class_for_question(question)} #{local_assigns[:lite] ? 'lite' : ''}"}
    %h3
      = link_to title, question_path(question), :class => "pjax", :"data-layout" => "question"

    .toolbar
      %ul
        %li.answers
          = link_to "#{format_number(question.answers_count)} #{t(:answers, :scope => "activerecord.attributes.question")}"
