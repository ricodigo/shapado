%meta{"data-js"=> 'show'}
= include_latex

- @current_class = 'question hentry entry post'

- show_close_request_form = !@question.closed && logged_in? && @question.can_be_requested_to_close_by?(current_user)
- show_open_request_form = @question.closed && logged_in? && @question.can_be_requested_to_open_by?(current_user)

- if logged_in?
  - if current_user.mod_of?(current_group) && @question.closed && @question.close_reason.present?
    - show_close_request_form = (@question.close_reason.user_id == current_user.id)
  - @flag = current_user.has_flagged?(@question) || Flag.new

- @flag ||= Flag.new

- if show_open_request_form
  - @open_request = current_user.has_requested_to_open?(@question) || OpenRequest.new

- if show_close_request_form
  - @close_request = @question.close_requests.detect{ |rq| rq.user_id == current_user.id } || CloseRequest.new(:reason => "dupe")

- question_body = find_and_preserve(shapado_auto_link(markdown(@question.body.present? ? @question.body : @question.title)))

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@question.tags.dup, @question.title)}
  %meta{:name => "description", :content => question_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => question_url(@question) }

-cache_for(:question, @question.id) do
  %section#question{:class => "main-question #{@question.id}"}
    %h1
      &= @question.title
      - if @question.closed
        =" [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

    .description.markdown
      = question_body
      = render "reward_info"
      = render "attachments", :question => @question, :attachments => @question.attachments, :editing => false
      .clear

    .stats
      %p
        %strong
          = link_to t("questions.answer.add_comment"), "#", :class => "reply Question-commentable", 'data-commentable' => @question.id
        %strong
          = t('activerecord.attributes.question.created_at')
        %time{:datetime => @question.created_at.iso8601}
          = t("time.ago", :time => time_ago_in_words(@question.created_at))
        %strong
          = t('questions.show.viewed')
        = t('number.x_time', :count => number_with_delimiter(@question.views_count))
        %strong
          = t("questions.show.last_activity")
        = t("time.ago", :time => time_ago_in_words(@question.activity_at))

    .comments
      -@question.comments.each do |comment|
        = render :partial => "comments/comment", :object => comment, :locals => {:source => @quetion, :mini => true}
    .panel-comments
      = form_for [@question, @comment ||= Comment.new], :html => {:class => "question_comment_form nestedAnswerForm", "data-commentable" => @question.id} do |f|
        %fieldset
          = render :partial => "comments/form", :locals => {:f => f, :commentable => @question, :source => question_url(@question)}
          .buttons
            = link_to t('scaffold.cancel'), '', :class => 'cancel cancel_comment'
            = t("global.or")
            = submit_tag t("comments.shared.comment_submit")
    .toolbar
      %ul.drop-menu
        %li.answer
          = link_to t("questions.question.answer_verb"), "#", :id => "add_answer"

        %li.follow
          - if current_user && @question.follower?(current_user)
            = link_to t('global.unfollow'), unfollow_question_path(@question), :class => 'unfollow-q question-action', "data-undo" =>  follow_question_path(@question), "data-title" => t(".follow_tooltip"), :title => t(".unfollow_tooltip"), 'data-text' => t('global.follow')
          - else
            = link_to t('global.follow'), follow_question_path(@question), :title => t(".follow_tooltip"), :class => 'follow-q question-action', "data-undo" =>  unfollow_question_path(@question), "data-title" => t(".unfollow_tooltip"), 'data-text' => t('global.unfollow')

        - if !@flag.new_record?
          %li.spam
            %span
              = "#{t('.flagged_as')} #{t(@flag.reason, :scope=>'flags.form')}"
            = link_to t("scaffold.edit"), edit_question_flag_path(@question,@flag), :id => "edit_question_flag_link", :class => "flag-link", :rel => 'nofollow'
            = link_to t("scaffold.destroy"), question_flag_path(@question,@flag), :id => "destroy_question_flag_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete

        - elsif logged_in? && current_user != @question.user
          %li.no-spam
            = link_to t(".flag"), new_question_flag_path(@question), :id => "flag_question", :class => "flag-link", "data-lazy" => "1", :rel => 'nofollow'

        %li.share_on
          = link_to t('global.share'), "#", :id => "share_question"

        %li.more.current
          = link_to t('.more_actions')
          %ul
            %li.activity
              = link_to t(".history", :default => "history")+" (#{@question.versions_count})", history_question_path(@question)

            %li.followUp
              = link_to t('.follow_up'), new_question_path(:from_question => @question.id), :rel => "nofollow", :title => t('.follow_up_description')

            - if logged_in?
              -if current_user.can_create_reward?(@question)
                %li.add_reward
                  = link_to t('.create_reward'), "#", :rel => "nofollow", :id => "add_reward", :title => t('.create_reward_description')


              - if show_close_request_form
                %li.spam
                  -if !@close_request.new_record?
                    = "#{t('.requested_close_as')} #{t(@close_request.reason, :scope=>'close_requests.form')}"
                    = link_to t(".edit_request"), edit_question_close_request_path(@question,@close_request), :id => "edit_question_close_request_link", :rel => 'nofollow'
                    = link_to t(".retract_request"), question_close_request_path(@question,@close_request), :id => "destroy_question_close_request_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete
                  = link_to t(".request_closing"), @close_request.new_record? ? new_question_close_request_path(@question) : edit_question_close_request_path(@question, @close_request), :id => "request-close-link", "data-lazy" => "1", :rel => 'nofollow', :title => t('.request_closing_details')

              - if (@question.wiki && current_user.can_edit_wiki_post_on?(@question.group)) || current_user.can_edit_others_posts_on?(@question.group) || current_user.can_modify?(@question)
                %li.edit-q
                  = link_to t('scaffold.edit'), edit_question_path(@question)
              - if (current_user.can_modify?(@question) || current_user.owner_of?(@question.group))
                %li.delete-q
                  = link_to t("scaffold.destroy"), question_path(@question), :confirm => "are you sure?", :method => :delete

              -if current_user.mod_of?(@question.group) && !@question.closed
                %li.close
                  = link_to t('.close'), question_close_requests_path(@question)

            - if show_open_request_form
              -if !@open_request.new_record?
                %li.open
                  = "#{t('.requested_reopening')} #{@open_request.comment}"
                  = link_to t(".edit_request"), edit_question_open_request_path(@question, @open_request), :id => "edit_question_open_request_link", :rel => 'nofollow'
                  = link_to t(".retract_request"), question_open_request_path(@question,@open_request), :id => "destroy_question_open_request_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete

              -if current_user.mod_of?(current_group)
                %li.open
                  = link_to t(".open"), open_question_path(@question), :rel => 'nofollow', :title => t('.request_opening_details'), :method => "put"
              -else
                %li.open
                  = link_to t(".request_opening"), new_question_open_request_path(@question), :id => "request-open-link", :rel => 'nofollow', :title => t('.request_opening_details')

              - if (current_user.can_modify?(@question) || current_user.owner_of?(@question.group))
                %li.ban
                  = link_to @question.banned ? t(".unban") : t(".ban"), manage_moderate_questions_path(:question_ids => [@question.id], :commit => @question.banned ? "unban": "ban"), :method => :put, :confirm => "are you sure?"
                %li.delete
                  = link_to t("scaffold.destroy"), question_path(@question.id), :confirm => "are you sure?", :method => :delete


      #panel-forms
        = render "reward_form"

        -unless @question.closed
          =form_for [@question, @answer ||= Answer.new], :html => {:class => "add_answer markdown"} do |f|

            = render :partial => "answers/form", :locals => {:f => f, :markdown => true, :question => @question}

            .field.form-options
              .column
                .checkbox
                  = f.label :wiki, "Wiki"
                  = f.check_box :wiki, :class => "checkbox"
              - if logged_in? && current_group.enable_anonymous
                .column
                  .checkbox
                    = f.label :anonymous, t("scaffold.post_as_anonymous"), :class => "radio"
                    = f.check_box :anonymous, {:class => "checkbox"}, true, false

              -if AppConfig.mailing && AppConfig.mailing["activate"]
                .column.by_mail
                  %a{:href => "mailto:#{@question.email}"}
                    Answer by email

              .buttons
                = submit_tag t('answers.form.submit'), :class => "save"
                = link_to t('scaffold.cancel'), '', :class => 'cancel'
                = t("global.or")

        =form_tag "", :class => "share_question" do
          %h1
            Share this on:
          %ul
            %li.facebook
              =link_to "Facebook"
            %li.twitter
              =link_to "Twitter"
            %li.identica
              =link_to "Identi.ca"
            %li.digg
              =link_to "Digg"
            %li.blogger
              =link_to "Blogger"
            %li.delicious
              =link_to "Delicious"
            %li.linkedin
              =link_to "LinkedIn"
            %li.misterwong
              =link_to "Mister Wong"
            %li.stumbleupon
              =link_to "StumbleUpon"
            %li.googlebuzz
              =link_to "Google Buzz"
            %li.friendster
              =link_to "Friendster"
          .clear

        .clear

  %ul.tag-list
    %li.title
      = t('global.tags_label')
    - @question.tags.each do |tag|
      %li
        = link_to h(tag), tag_path(:id => tag), :rel => "tag", :class => 'tag'
    - if logged_in? && (current_user.can_modify?(@question) || current_user.can_retag_others_questions_on?(current_group))
      %li.retag
        = link_to t('.retag'), retag_question_path(@question), :id => 'retag'

  #answers-content-wrap
    %header
      %h3
        = t(".answers_title", :count => @answers.total_entries)

    %section.filters
      %ul{:class => @active_subtab.to_s}
        %header= t('global.sort_by')
        %li.newest-active
          = link_to t("questions.index.newest"), question_path(@question, :sort=>"newest", :anchor => "answers"), :rel => "nofollow", :class => "pjax", :"data-layout" => "question"
        %li.votes-active
          = link_to t("questions.index.votes"), question_path(@question, :sort=>"votes", :anchor => "answers"), :rel => "nofollow", :class => "pjax", :"data-layout" => "question"
        %li.oldest-active
          = link_to t("questions.index.oldest"), question_path(@question, :sort=>"oldest", :anchor => "answers"), :rel => "nofollow", :class => "pjax", :"data-layout" => "question"
        %li
          = link_to t('.solution')

    .error
      - source = question_path(@question)
      = error_messages_for 'answer'

    .followUp-content
      -if @question.follow_up
        %h1
          =t("questions.show.follow_up_of")
        = link_to @question.follow_up.original_question.title, question_path(@question.follow_up.original_question)+"##{@question.follow_up.original_answer_id}"

      -if @question.followed_up_by.limit(1).count > 0
        %h1= t('global.followed_by')
        %ul
          -@question.followed_up_by.all.each do |child|
            %li
              = link_to child.title, question_path(child)

      - if @question.closed && @question.close_reason.present?
        #close_reason.pacho
          = t(".close_reason")
          = t(@question.close_reason.reason, :scope=>"close_requests.form")
          - if !@question.close_reason.comment.empty?

            .comment
              =find_and_preserve(shapado_auto_link(@question.close_reason.comment))

    .answers-list
      - if @question.accepted
        -solution = @question.answer
        =render :partial=> "answer", :locals=> {:question => @question, :answer => solution} unless solution.nil?

      -@answers.each do |answer|
        -next if answer.id == @question.answer_id
        =render :partial=> "answer", :locals=> {:question => @question, :answer => answer}

    =will_paginate(@answers)


  -content_for :sidebar do
    = render "shared/widgets", :context => 'question', :position => 'sidebar'
